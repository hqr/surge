//
// ModelOne (m1, "1") is a unidirectional event storm
// randomly generated by all the configured gateways
// Server selection is random as well
// Upon reception, server simply drops the event to the floor
// and goes on listening
//
// Framework services utilized by this model:
// - time, events and event comm,
// - multitasking, stats reporting, logging
//
package surge

import (
	"time"
)

// implements ModelInterface
type ModelOne struct {
}

type GatewayOne struct {
	RunnerBase
}

type ServerOne struct {
	RunnerBase
}

//
// init
//
func init() {
	d := NewStatsDescriptors("1")
	d.Register("event", StatsKindCount, StatsScopeServer)
	d.Register("rxbusy", StatsKindPercentage, StatsScopeServer)

	props := make(map[string]interface{}, 1)
	props["description"] = "unidirectional storm of random events"
	// props["GOMAXPROCS"] = 1
	RegisterModel("1", &ModelOne{}, props)
}

//==================================================================
//
// GatewayOne methods
//
//==================================================================
//
// generate random event (storm) => random servers
//
func (r *GatewayOne) Run() {
	r.state = RstateRunning

	go func() {
		for r.state == RstateRunning {
			r.send()
			time.Sleep(time.Microsecond * 100)
		}
		r.closeTxChannels()
	}()
}

func (r *GatewayOne) send() {
	sr := r.selectRandomPeer(64) // hardcoded max load
	if sr != nil {
		at := clusterTripPlusRandom()
		r.Send(newTimedUcastEvent(r, at, sr), false)
	}
}

//==================================================================
//
// ServerOne methods
//
//==================================================================
func (r *ServerOne) Run() {
	r.state = RstateRunning

	// event handling is a NOP in this model
	rxcallback := func(ev EventInterface) bool {
		assert(r == ev.GetTarget())
		log(LOG_VV, "proc-ed", ev.String())
		return true
	}

	go func() {
		for r.state == RstateRunning {
			r.receiveEnqueue()
			time.Sleep(time.Microsecond)
			r.processPendingEvents(rxcallback)
		}
	}()
}

//==================================================================
//
// ModelInterface methods
//
//==================================================================
func (m *ModelOne) NewGateway(i int) RunnerInterface {
	gwy := &GatewayOne{RunnerBase{id: i, strtype: "GWY"}}
	gwy.init(config.numServers)
	return gwy
}

func (m *ModelOne) NewServer(i int) RunnerInterface {
	srv := &ServerOne{RunnerBase: RunnerBase{id: i, strtype: "SRV"}}
	srv.init(config.numGateways)
	return srv
}

func (m *ModelOne) NewDisk(i int) RunnerInterface { return nil }

func (m *ModelOne) Configure() {
	config.timeClusterTrip = time.Microsecond * 2
}
